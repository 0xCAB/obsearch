<?xml version="1.0"?>
<!-- This is a convenience script used to run OB's examples 
     This allows the programmer to control exactly what parameters
		 are being passed to OB. Using unit tests is not a good idea, as
		 assertions are always enabled.
-->

<project name="OBSearchExample" xmlns:artifact="urn:maven-artifact-ant">

<target name="init">
	<property name="anttask" value="maven-ant-tasks-2.0.6.jar"/>
	<property name="jardownloadlocation" value="http://ftp.kddilabs.jp/infosystems/apache/maven/binaries/"/>
	<property name="destlocation" value=".."/>

	<property name="dbfolder" value="${user.home}/temp/obexampleTentacleOTHER/"/>


</target>

<!-- check if maven tasks have been downloaded -->
<target name="checkprerequisites">
<condition property="mavenanttaskavailable">
      <available file="../${anttask}"/>
</condition>
</target>

<!-- download maven tasks -->
<target name="downloadprerequisites" unless="mavenanttaskavailable" depends="checkprerequisites, init">

	<get src="${jardownloadlocation}/${anttask}" dest="${destlocation}/${anttask}"/>
	
</target>

<!-- initialize maven tasks-->
<target name="maven" depends="init, downloadprerequisites">
	
	<path id="maven-ant-tasks.classpath" path="${destlocation}/${anttask}" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
           classpathref="maven-ant-tasks.classpath" />
	<!-- access maven project -->
	<artifact:pom id="project" file="pom.xml" />
	<!-- define the classpath -->

	
	<!-- generate the classpath -->
	<artifact:dependencies pathId="dependency.classpath">
      <pom refid="project"/>
  </artifact:dependencies>
	<echo>
		Local class path ${project.build.outputDirectory}
	</echo>

	<!-- DB and QUERY datafiles -->

	<property name="dbdata" value="${project.build.outputDirectory}/slices"/>
	<property name="querydata" value="${project.build.outputDirectory}/slices-query"/>
</target>

 
<target name="create" depends="maven">
	 <delete dir="${dbfolder}"/>
	    <mkdir dir="${dbfolder}"/>

	    <java dir="${project.build.outputDirectory}" fork="yes" classpath="${project.build.outputDirectory}:${project.build.testOutputDirectory}" classpathref="dependency.classpath" classname="org.ajmm.obsearch.example.OBExampleTrees"  failonerror="true">
				<jvmarg value="-ea" />
				<jvmarg value="-server" />
				<jvmarg value="-Xmx1000M" />
				<arg value="-create"/>
				<arg value="-db"/>
				<arg value="${dbfolder}"/>
				<arg value="-data"/>
				<arg value="${dbdata}"/>
				<arg value="-od"/>
				<arg value="6"/>
			</java>
</target>

<target name="search" depends="maven">
	<java dir="${project.build.outputDirectory}" fork="yes" classpath="${project.build.outputDirectory}:${project.build.testOutputDirectory}" classpathref="dependency.classpath"   classname="org.ajmm.obsearch.example.OBExampleTrees"  failonerror="true">
				<jvmarg value="-server" />
<!--				<jvmarg value="-ea"/>-->
				<jvmarg value="-Xmx1000M" />
				<arg value="-search"/>
				<arg value="-r"/>
				<arg value="3"/>
				<arg value="-k"/>
				<arg value="2"/>
				<arg value="-db"/>
				<arg value="${dbfolder}"/>
				<arg value="-data"/>
				<arg value="${querydata}"/>
			</java>
</target>

<target name="dummy" depends="maven">
	<java dir="${project.build.outputDirectory}" fork="yes" classpath="${project.build.outputDirectory}:${project.build.testOutputDirectory}" classpathref="dependency.classpath"   classname="org.ajmm.obsearch.grid.OBGrid"  failonerror="true">
				<jvmarg value="-server" />
			</java>
</target>



</project>
