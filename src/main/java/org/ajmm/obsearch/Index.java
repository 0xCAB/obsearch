package org.ajmm.obsearch;

import java.io.File;
import java.io.IOException;

import org.ajmm.obsearch.exception.AlreadyFrozenException;
import org.ajmm.obsearch.exception.IllegalIdException;
import org.ajmm.obsearch.exception.IllegalKException;
import org.ajmm.obsearch.exception.NotFrozenException;
import org.ajmm.obsearch.exception.OBException;
import org.ajmm.obsearch.exception.OutOfRangeException;
import org.ajmm.obsearch.exception.UndefinedPivotsException;

import com.sleepycat.bind.tuple.TupleInput;
import com.sleepycat.je.DatabaseException;

/*
 OBSearch: a distributed similarity search engine
 This project is to similarity search what 'bit-torrent' is to downloads.
 Copyright (C)  2007 Arnoldo Jose Muller Molina

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * This the main contract for OBSearch indexes. The number of methods has been
 * reduced to avoid confusion. The normal lifecycle of an index is: 1) Insert
 * many records 2) Perform a freeze A freeze is an operation that calculates
 * different information on the data. The idea is to "learn" how the sample data
 * is distributed to improve performance You cannot perform searches on an
 * unfrozen index. Note that freezing the index does not mean you can't insert
 * new data. You can! 3) Insert/Delete new records/ and search! yay! There are
 * indexes that wrap other indexes to provide extended functionality. These
 * indexes might not need to be frozen. Please consult the documentation for
 * each index.
 * 
 * @author Arnoldo Jose Muller Molina
 * @version %I%, %G%
 * @since 1.0
 */

public interface Index<O extends OB> {

	
	/**
	 * Inserts the given object into the index
	 * If the index is not frozen, you are expected to insert objects that are not duplicated
	 * OBSearch cannnot efficiently perform those checks for you at this stage (before freezing), so
	 * please be careful. 
	 * @param object
	 *            The object to be added
	 * @param id
	 *            Identification number of the given object. This number must be
	 *            responsibly generated by someone
	 * @return The internal id of the object(>= 0) or -1 if the object exists in
	 *         the database
	 * @throws IllegalIdException
	 *             if the given ID already exists or if isFrozen() = false and
	 *             the ID's did not come in sequential order
	 * @throws DatabaseException
	 *             If something goes wrong with the DB
	 * @return The internal id of the object or -1 if the object was not
	 *         inserted because it already exists
	 * @since 0.0
	 */
	int insert(O object) throws DatabaseException, OBException,
			IllegalAccessException, InstantiationException;

	/**
	 * Returns true if the index is frozen.
	 * 
	 * @return true if the index is frozen, false otherwise
	 */
	boolean isFrozen();

	/**
	 * Returns true if the given object exists in the database. This method was
	 * created for OBSearch internal use. If you are realying on this method a
	 * lot, isn't it better to use a Hashtable or a B-tree instead of OBSearch?
	 * 
	 * @param object
	 * @return
	 */
	boolean exists(O object) throws DatabaseException, OBException,
			IllegalAccessException, InstantiationException;

	/**
	 * Freezes the index. From this point data can be inserted, searched and
	 * deleted The index might deteriorate at some point so every once in a
	 * while it is a good idea to rebuild de index
	 * 
	 * @param pivotSelector
	 *            The pivot selector to be used
	 * @throws IOException
	 *             if the serialization process fails
	 * @throws AlreadyFrozenException
	 *             If the index was already frozen and the user attempted to
	 *             freeze it again
	 */
	void freeze() throws IOException, AlreadyFrozenException,
			IllegalIdException, IllegalAccessException, InstantiationException,
			DatabaseException, OutOfRangeException, OBException,
			UndefinedPivotsException;

	/**
	 * Deletes the given object form the database.
	 * 
	 * @param object
	 *            The object to be deleted
	 * @return >= (the object ID) if the object was deleted or -1 if the object
	 *         was not deleted
	 * @throws NotFrozenException
	 *             if the index has not been frozen. was deleted successfully
	 * @throws DatabaseException
	 *             If something goes wrong with the DB
	 * @return The former id of the given object
	 * @since 0.0
	 */
	public int delete(O object) throws NotFrozenException, DatabaseException;

	/**
	 * This method returns the object with id "i". Mainly used for internal
	 * validation purposes, users should not have to use this method directly
	 * 
	 * @param i
	 * @return
	 * @throws DatabaseException
	 * @throws IllegalIdException
	 * @throws IllegalAccessException
	 * @throws InstantiationException
	 */
	public O getObject(int i) throws DatabaseException, IllegalIdException,
			IllegalAccessException, InstantiationException, OBException;

	/**
	 * Closes the database
	 * 
	 */
	public void close() throws DatabaseException;

	/**
	 * Returns the total number of boxes this index can hold
	 * 
	 * @return
	 */
	int totalBoxes();

	/**
	 * Returns the box where the given object has to be stored
	 * 
	 * @param object
	 * @return The box that corresponds to object
	 */
	int getBox(O object) throws OBException;

	/**
	 * Returns the database size
	 * 
	 * @return Number of elements in the database
	 * @throws DatabaseException
	 */
	int databaseSize() throws DatabaseException;

	/**
	 * This method *must* be called after de-serializing the database object.
	 * Index implementations should store internally the location of the
	 * database, but this method allows you to override this. If the given value
	 * is null, the internally stored path will be used.
	 * 
	 * @param dbPath
	 *            New database path, or null if the default is to be used
	 */
	void relocateInitialize(File dbPath) throws DatabaseException,
			NotFrozenException, DatabaseException, IllegalAccessException,
			InstantiationException, OBException, IOException;

	/**
	 * Generates an XML representation of this index suitable for serialization.
	 * The data itself is not serialized, only the metadata necessary to allow
	 * this index to be frozen.
	 * 
	 * @return
	 */
	String toXML();

	/**
	 * Instantiates an object from a byte stream
	 * 
	 * @param in
	 * @return
	 */
	O readObject(TupleInput in) throws InstantiationException,
			IllegalAccessException, OBException;

}
